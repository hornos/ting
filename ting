#!/usr/bin/env ruby
require 'pusher'
require 'pusher-client'
require 'msgpack'
require 'xz'
require 'ascii85'
require 'gibberish'
require 'securerandom'
require 'digest/md5'
require 'gli'
require 'eat'
require 'json'
require 'open3'

include GLI::App
program_desc 'The Ting Tings'
version 1.0

### compress
def msgpack(data,enc=:encode)
  return data.to_msgpack if enc == :encode
  MessagePack.unpack(data)
end

def xz(data,enc=:encode)
  return XZ::compress(data) if enc == :encode
  XZ::decompress(data)
end

def ascii85(data,enc=:encode)
  return Ascii85.encode(data) if enc == :encode
  Ascii85.decode(data)
end

### encrypt
def aes(data,enc=:encode)
  return @cipher.enc(data) if enc == :encode
  @cipher.dec(data)
end

def encode(data,redux=@config[:redux])
  redux.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :encode)
  end
  data
end

def decode(data,redux=@config[:redux])
  redux.reverse.inject(data) do |enc,encoder|
    data = send(encoder.to_sym, data, :decode)
  end
  data
end

### upnp
def upnp(pattern="ExternalIPAddress")
  stdin, stdout, stderr = Open3.popen3('upnpc -l')
  for line in stdout.readlines
    return line.split.last if line =~ /#{pattern}/
  end
end

def sshfp(type="rsa")
  stdin, stdout, stderr = Open3.popen3("ssh-keygen -lf /etc/ssh/ssh_host_#{type}_key.pub")
  for line in stdout.readlines
    return line.split[1]
  end
end

### Global flags
desc 'Config'
default_value "#{File.basename(__FILE__)}.yml"
arg_name 'config'
flag [:c,:config]

desc 'Secret Key'
default_value "#{File.basename(__FILE__)}.key"
arg_name 'key'
flag [:k,:key]

desc 'Hosts directory'
default_value "#{File.dirname(__FILE__)}/hosts"
arg_name 'hosts'
flag [:h,:hosts]

### Global switches
desc 'Use UPNP'
switch [:u,:upnp]

desc 'Use SQL'
switch [:s,:sql]

### Commands
desc 'Ting client'
arg_name ''
command :client do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]

    PusherClient.logger = Logger.new(STDOUT)
    PusherClient.logger.level = Logger::INFO
    options = {:secret => cfg[:secret]} 
    socket = PusherClient::Socket.new(cfg[:key], options)

    # Subscribe to two channels
    socket.subscribe(cfg[:channel])
    socket[cfg[:channel]].bind(cfg[:event]) do |data|
      begin
        cmd, data = decode(data)

        case cmd
        when 'ping'
          chan  = cfg[:channel]
          event = cfg[:event]
          ip = global_options[:u] ? upnp() : eat('http://ifconfig.me/ip', :timeout => 60)
          pong = {
            :id => @config[:myid],
            :ip => ip.strip,
            :fp => sshfp()
          }
          Pusher[chan].trigger(event, encode(['pong',pong]))
        when 'pong'
          data.tap do |h|
            h.keys.each { |k| h[k.to_sym] = h.delete(k) }
          end
          out = "#{global_options[:h]}/#{data[:id]}.json"
          File.open(out,"w") do |f|
            f.write(JSON.pretty_generate(data))
          end
          puts data
        end # case cmd

      rescue Exception => e  
        puts "Exception: #{e.message}"
        next
      end

    end # socket do data

    socket.connect
  end
end

desc 'Ping'
arg_name ''
command :ping do |cmd|
  cmd.action do |global_options,options,args|
    cfg   = @config[:pusher]
    chan  = cfg[:channel]
    event = cfg[:event]
    Pusher[chan].trigger(event, encode(['ping',args]))
  end
end

desc 'Generate shared key'
arg_name ''
command :genkey do |cmd|
  cmd.action do |global_options,options,args|
    print SecureRandom.urlsafe_base64(len=32)
  end
end

pre do |global,command,options,args|
  puts "Ting started"

  # change to base directory
  Dir.chdir(File.dirname(__FILE__))

  @config = YAML.load( ERB.new( File.read( global[:config] ) ).result )
  @config[:id] = global[:id] || command.name.to_s
  {:args=> args, :global=> global, :options=> options}.each { |k,v| @config[k] = v }
  @config[:key] = File.read( global[:key] )
  @cipher = Gibberish::AES.new(@config[:key])

  # init Pusher
  cfg = @config[:pusher]
  Pusher.app_id = cfg[:app_id]
  Pusher.key    = cfg[:key]
  Pusher.secret = cfg[:secret]
  # Pusher.encrypted =

  # UPNP discovery
  if global[:u]
    @externalip = upnp()
    die('UPNP failed') if @externalip.empty?
    puts "External IP: #{@externalip}"
  end

  # init hosts
  Dir.mkdir(global[:h]) unless File.exists?(global[:h])

  true
end

post do |global,command,options,args|
  true
end

on_error do |exception|
  STDERR.puts exception.backtrace
  # require 'pry'
  # binding.pry
  true
end

exit run(ARGV)
